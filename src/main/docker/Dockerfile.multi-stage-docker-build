## Stage 1 : build with maven builder image with native capabilities
FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:22.3.0-java17 AS build
COPY --chown=quarkus:quarkus mvnw /code/mvnw
COPY --chown=quarkus:quarkus .mvn /code/.mvn
COPY --chown=quarkus:quarkus pom.xml /code/
USER root
RUN mkdir -p /code/target
RUN chown quarkus /code/target \
    && chmod "g+rwX" /code/target \
    && chown quarkus:root /code/target
USER quarkus
WORKDIR /code
# passing thru to stage 2 - Kaniko workaround
COPY cacerts /tmp/cacerts
# RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline
COPY ci_settings.xml ci_settings.xml
COPY src /code/src

RUN ./mvnw -s ci_settings.xml package -Dnative -Dmaven.test.skip=true -Dquarkus.native.native-image-xmx=6G

# RUN ./mvnw package -Pnative -Dmaven.test.skip=true -Dquarkus.native.native-image-xmx=6G
# RUN ./mvnw package -Dnative -Dquarkus.native.native-image-xmx=6G
# RUN ./mvnw -s ci_settings.xml package -Dnative -Dquarkus.native.native-image-xmx=6G -Dmaven.test.skip=true

## Stage 2 : create the docker final image
FROM registry.access.redhat.com/ubi8/ubi-minimal:8.8
WORKDIR /work/

COPY --from=build /code/target/*-runner /work/application
COPY --from=build /tmp/cacerts /tmp/cacerts

# set up permissions for user `1001`
RUN chmod 775 /work /work/application \
  && chown -R 1001 /work \
  && chmod -R "g+rwX" /work \
  && chown -R 1001:root /work \
  && chown -R 1001 /tmp/cacerts \
  && chmod -R "g+rwX" /tmp/cacerts \
  && chown -R 1001:root /tmp/cacerts


EXPOSE 8080
USER 1001

CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]